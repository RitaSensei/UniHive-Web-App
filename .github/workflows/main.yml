name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.CI_REGISTRY_USER }}
          password: ${{ secrets.CI_REGISTRY_PASSWORD }}

      - name: Build Docker image for frontend
        run: docker build -t ${{ secrets.CI_REGISTRY_IMAGE }}-frontend:${{ github.sha }} -f unihive-fe/Dockerfile .

      - name: Build Docker image for backend
        run: docker build -t ${{ secrets.CI_REGISTRY_IMAGE }}-backend:${{ github.sha }} -f unihive-backend/Dockerfile .

      - name: Create build artifacts directories
        run: |
          mkdir -p build-artifacts/frontend
          mkdir -p build-artifacts/backend

      - name: Save frontend build artifacts
        run: |
          docker cp $(docker create ${{ secrets.CI_REGISTRY_IMAGE }}-frontend:${{ github.sha }}):/usr/share/nginx/html build-artifacts/frontend

      - name: Save backend build artifacts
        run: |
          docker cp $(docker create ${{ secrets.CI_REGISTRY_IMAGE }}-backend:${{ github.sha }}):/app build-artifacts/backend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build-artifacts

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build-artifacts

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bash git

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build and push Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_FRONTEND_APP_NAME }}/web ./build-artifacts/frontend
          docker push registry.heroku.com/${{ secrets.HEROKU_FRONTEND_APP_NAME }}/web

      - name: Release Docker image to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ secrets.HEROKU_FRONTEND_APP_NAME }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build-artifacts

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl bash git

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build and push Docker image to Heroku
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_BACKEND_APP_NAME }}/web ./build-artifacts/backend
          docker push registry.heroku.com/${{ secrets.HEROKU_BACKEND_APP_NAME }}/web

      - name: Release Docker image to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ secrets.HEROKU_BACKEND_APP_NAME }}
