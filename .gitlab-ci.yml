stages:
  - build-backend
  - build-frontend
  - deploy

# Cache Maven dependencies and Node.js modules to speed up subsequent builds
cache:
  paths:
    - .m2/repository
    - unihive-fe/node_modules

# Build the Spring Boot application
build-backend:
  stage: build-backend
  image: maven:3.8.3-openjdk-17
  script:
    - mvn -f unihive-backend/pom.xml clean package -DskipTests
  artifacts:
    paths:
      - ./unihive-backend/target/*.jar
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository

# Build the React application
build-frontend:
  stage: build-frontend
  image: node:14
  script:
    - cd unihive-fe
    - npm install
    - npm run build
  artifacts:
    paths:
      - ./unihive-fe/dist
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - unihive-fe/node_modules
      
# Deploy to Heroku
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Install necessary tools
    - apk update && apk add curl bash nodejs npm git
    # Install Heroku CLI
    - curl https://cli-assets.heroku.com/install.sh | sh
    - heroku --version
    # Authenticate Docker with Heroku
    - echo "$HEROKU_PRODUCTION_KEY" | docker login --username=_ --password-stdin registry.heroku.com
    # Configure git
    - git config --global user.email "ghita28loukili@gmail.com"
    - git config --global user.name "GhitaLoukili"
  script:
    # Verify frontend build directory exists
    - if [ ! -d "./unihive-fe/dist" ]; then echo "Frontend build directory does not exist"; exit 1; fi
    # Copy frontend build to backend resources
    - cp -r ./unihive-fe/dist/* unihive-backend/src/main/resources
    # Change to backend directory
    - cd unihive-backend
    # Create a new branch named 'main' and switch to it
    - git remote add heroku https://heroku:$HEROKU_PRODUCTION_KEY@git.heroku.com/unihive.git
    - heroku git:remote -a unihive
    # Unshallow the repository
    - git fetch --unshallow
    # Switch to main branch and ensure it's fully unshallowed
    - git checkout -b main
    # Add, commit, and push changes to 'main'
    - git add .
    - git commit -m "Deploy frontend to Heroku"
    - git push heroku main:main
    # Build the Docker image
    - docker build -t registry.heroku.com/$HEROKU_APP_NAME/web -f ./unihive-backend/Dockerfile .
    # Push the Docker image to Heroku registry
    - docker push registry.heroku.com/$HEROKU_APP_NAME/web
    # Release the Docker image
    - heroku container:release web --app $HEROKU_APP_NAME
  artifacts:
    paths:
      - unihive-backend/src/main/resources/static
  only:
    - main
