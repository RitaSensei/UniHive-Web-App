stages:
  - build-backend
  - build-frontend
  - deploy

# Cache Maven dependencies and Node.js modules to speed up subsequent builds
cache:
  paths:
    - .m2/repository
    - frontend/node_modules

# Build the Spring Boot application
build-backend:
  stage: build-backend
  image: maven:3.8.3-openjdk-17
  script:

    - mvn -f unihive-backend/pom.xml clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar

# Build the React application
build-frontend:
  stage: build-frontend
  image: node:14
  script:
    - cd unihive-fe
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/build/

# Deploy to Heroku
deploy:
  stage: deploy
  image: docker:stable
  variables:
    DOCKER_HOST: tcp://localhost:2375
  script:
    # Authenticate with Heroku using the Heroku API key
    - apk add --no-cache ruby ruby-dev git
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
    # Deploy the backend
    - cd unihive-backend
    - git add .
    - git commit -m "Deploy backend to Heroku"
    - git push heroku main
    # Deploy the frontend build
    - cd ../unihive-fe
    - npm install
    - npm run build
    - cd ..
    - mv unihive-fe/build unihive-backend/src/main/resources/static
    - cd unihive-backend
    - mvn clean package -DskipTests
    # Tag and push the Docker image
    - docker build -t registry.heroku.com/$HEROKU_APP_NAME/web .
    - docker push registry.heroku.com/$HEROKU_APP_NAME/web
    # Release the Docker image
    - heroku container:release web --app $HEROKU_APP_NAME
  only:
    - main

